#!/bin/sh
IFS=$'\n'
tempfile="/tmp/bluethoothdmenudevicelist.txt"
_bluetoothctl() {
    LC_ALL=C timeout 30 bluetoothctl
}
smoll=0
mode="connect"
set +x $mode 
unset $mode
busctl tree org.bluez > $tempfile
while read mac; do
    a=$(echo ${mac##*/dev_}| grep -v "└─/org")
    if [ -z $a ]; then
        continue;
    fi
    b=$(busctl get-property org.bluez /org/bluez/hci0/dev_$a org.bluez.Device1 Alias)
    b=${b##s }
    
    c=$(busctl get-property org.bluez /org/bluez/hci0/dev_$a org.bluez.Device1 Address)
    c=${c##s }
    if ( 
        [ ${#b} > $smoll ]
    ) then ( 
        smoll=${#b} 
    ) fi
    old=""
    set +x $@ $a $b $c;
    
done < $tempfile

unset a; unset b; unset c;
#echo "$#"
#notify() {
#    msg=${1?BUG: no message}
#    is_error=${2:-0}
#    if command -v notify-send >/dev/null 2>&1; then
#        notify-send "btmenu" "$msg"  # TODO: escaping
#    fi
#
#    if (( is_error )); then
#        printf 'ERROR: %s\n' "$msg" >&2
#    else
#        printf '%s\n' "$msg"
#    fi
#    unset msg
#    unset is_error
#}

execute_mode() {
    local mode=${1?BUG: missing mode}
    retries=15
    
    case $mode in
        connect)
            preposition=to
            expected_to_connect=yes
        ;;
        disconnect)
            preposition=from
            expected_to_connect=no
        ;;
    esac
    #TODO annoying...
    #if ( ${2:-true} ) then 
    #    notify "No devices found. Are they registered with D-Bus?"  
    #    return 2
    #fi
    inc=$#
    inc=$((inc-1))
    demon=$(eval printf \"\$$inc\"); 
    inc=$((inc-2))
    tellar=$(eval printf \"\$$inc\"); 
    smoll=${#demon}
    demon=${demon:1:-1}$tella$tellar
    inc=$((inc-1))
    while (( $inc >= 2 )); do
        aussie=$(eval printf \"\$$inc\"); 
        inc=$((inc-2))
        tellar=$(eval printf \"\$$inc\"); 
        inc=$((inc+2))
        demon=$(printf "%s»%s%s" $demon ${aussie:1:-1} $tellar);
        
        #demon=${eval echo \"\$$inc\"}
        #printf $demon
        #set +x $@ $demon
        #echo $1
        inc=$((inc-3))
    done
    #| sed -E "s/«/    /g" 
    demon=$(echo $demon | sed -E "s/»/`space=${#demon}; while (( smoll > i++ )); do ( printf " " ); done; unset space;`\n/g")
    demon+=$(printf \\n%s " ")
    demon+=$(printf \\nPowered%s `busctl get-property org.bluez /org/bluez/hci0 org.bluez.Adapter1 Powered | sed -E "s/b/:/"`)
    demon+=$(printf \\nDiscoverable%s `busctl get-property org.bluez /org/bluez/hci0 org.bluez.Adapter1 Discoverable | sed -E "s/b/:/"`)
    demon+=$(printf \\nPairable%s`busctl get-property org.bluez /org/bluez/hci0 org.bluez.Adapter1 Pairable | sed -E "s/b/:/"`)
    name=$(printf '%s\n' $demon | dmenu -l $# -p "btmenu")
    unset aussie
    unset demon
    unset inc
    return 
    #[[ $name ]] || return
    mac=${name:format+2:-1}
    if [[ ${name:1:1} != " " ]]; then
        notify "Changing $name"
        mac=$(echo "$name" | sed -e "s/: yes/ off/")
        if [[ $mac =~ "$name" ]]; then 
            mac=$(echo "$name" | sed -e "s/: no/ on/")
        fi
        debug=$(echo ${mac,,} | _bluetoothctl)
        echo $debug 
        exit 
    else
    
        notify "Attempting to $mode $preposition $mac"
        while (( retries-- )); do
            printf '%s %s\n' "$mode" "$mac" | _bluetoothctl
            if printf 'info %s\n' "$mac" |
                _bluetoothctl |
                grep -Pq '^[\t ]+Connected: '"$expected_to_connect"; then
                notify "${mode^}ed $preposition $name"
                return 0
            fi
            sleep 1
        done

        ret="$?"
        notify "Failed to $mode $preposition $name" 1
        return "$ret"
    fi
    unset mode
    unset name
    unset mac
    unset preposition
    unset expected_to_connect
    unset retries
    
}
printf "%s" "$@"
execute_mode "$@"
