#!/bin/sh
IFS='
'
MAXLINES=15
tempfile="/tmp/bluethoothdmenudevicelist.txt"
width=0
mode="Connect"
connectedTo=""
# USER DEFINED VARIABLES
# ----------------------
SERVICE="org.bluez"
OBJ_SELF="/org/bluez/hci0"
OBJ_TEMPLATE="/org/bluez/hci0/dev_"
INTERFACE_SELF="org.bluez.Adapter1"
INTERFACE="org.bluez.Device1"
# Prefixes these were needed because i didn't know that substring indexing was not POSIX compliant
# Prefix for previously paired devices, these have to be added in busctl
DELIM_DEVICES=""
# Prefix for empty/blank lines
DELIM_SPACE="¦"
# Prefix for properties, in the properties section
DELIM_PROPS="|"

set +x $mode 
unset $mode

busctl tree org.bluez > $tempfile
while read mac; do
    t=$(echo "${mac##*/dev_}"| grep -v "└─/org")
    a=${t%%/*}
    #Discard repeats due to there being "sub-adresses"
    if [ -z "$a" ] || [ "$a" != "$t" ]; then
        continue;
    fi
    isConnected=$(busctl get-property $SERVICE $OBJ_TEMPLATE"$a" $INTERFACE Connected)
    b=$(busctl get-property $SERVICE $OBJ_TEMPLATE"$a" $INTERFACE Alias)
    b=${b##s }
    
    #If you're wondering why im saving the adress, im assuming it can be different than the a variable, i also use it to display on dmenu
    c=$(busctl get-property $SERVICE $OBJ_TEMPLATE"$a" $INTERFACE Address)
    c=${c##s }
    if [ "$isConnected" = "b true" ]; then
        connectedTo="$c"
        #echo $connectedTo; 
    fi
    set +x "$@" "$a" "$b" "$c";
    
done < $tempfile

unset a; unset b; unset c;
#echo "$#"
notify() {
    msg=${1?BUG: no message}
    is_error=${2}
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "btmenu" "$msg"  # TODO: escaping
    fi
    
    if [ "$is_error" ]; then
        printf 'ERROR: %s\n' "$msg" >&2
    else
        printf '%s\n' "$msg"
    fi
    unset msg
    unset is_error
}
setwidth(){
    width=0
    for str in "$@"; do
        [ $width -lt ${#str} ] && width=${#str}
    done
}

execute_mode() {
    selected="$DELIM_DEVICES"
    mode=${1?BUG: missing mode}
    
    case $mode in
        Connect)
            preposition=to 
        ;;
        Disconnect)
            preposition=from
        ;;
    esac
    
    if [ ! "${2}" ]; then 
        notify "No devices found. Are they registered with D-Bus?"  
        return 2
    fi
    setwidth "$@"
    
    inc=$(($#))
    
    tellar=$(eval printf "%s" \$\{$inc\});
    if [ "$connectedTo" = "$tellar" ]; then
        selected=" ---"
    fi 
    inc=$((inc-1))
    demon=$(eval printf "%s" \$\{$inc\} | cut -d\" -f 2 ); 
    
    demon=$(printf "%-5s%-${width}s%s" "$selected" "$demon" "$tellar")
    inc=$((inc-3))
    while [ $inc -ge 2 ]; do
        selected="$DELIM_DEVICES"
        aussie=$(eval printf "%s" \"\$\{$inc\}\" | cut -d\" -f 2 ); 
        inc=$((inc+1))
        tellar=$(eval printf "%s" \"\$\{$inc\}\"); 
        if [ "$connectedTo" = "$tellar" ]; then
            selected=" ---"
        fi 
        demon="$demon"$(printf "»%-5s%-${width}s%s" "$selected" "$aussie" "$tellar");
        inc=$((inc-4))
    done
    #Apparently in posix shells += is undefined so yeah i had to go back in "cleaness"
    demon=$(echo "$demon" | sed -E "s/»/\n/g")
    demon="$demon"$(printf \\n%s "$DELIM_SPACE")
    demon="$demon"$(printf \\n${DELIM_PROPS}Powered%s "$(busctl get-property $SERVICE $OBJ_SELF $INTERFACE_SELF Powered | sed -E "s/b/:/")")
    demon="$demon"$(printf \\n${DELIM_PROPS}Discoverable%s "$(busctl get-property $SERVICE $OBJ_SELF $INTERFACE_SELF Discoverable | sed -E "s/b/:/")")
    demon="$demon"$(printf \\n${DELIM_PROPS}Pairable%s "$(busctl get-property $SERVICE $OBJ_SELF $INTERFACE_SELF Pairable | sed -E "s/b/:/")")
    name=$(printf '%s\n' "$demon" | dmenu -l $MAXLINES -p "btmenu")
    unset aussie
    unset tellar
    unset demon
    unset inc
    #the idea is that an adress presented on the device may be corrupted or mismatch the one saved on busctl but for now i will do it the lazy way
    
    #TODO theres most likely an error in case of a device having a name containing a " although i haven't researched it 
    
    mac=$(echo "$name" | cut -d\" -f 2)

    if [ "${name##$DELIM_DEVICES}" != "$name" ]; then
        #TODO Theres an error in case of a device having a name containing a -
        if [ "${name##-}" != "$name" ]; then
            mode="Disconnect"
            #$name=${name:5}
        fi

        mac=$( echo "$mac" | sed -e "s/:/_/g" )
        notify "Attempting to $mode $preposition $mac"
        #while (( retries-- )); do
            final=$(printf "busctl call $SERVICE $OBJ_TEMPLATE%s $INTERFACE %s " "$mac" "$mode") 
            echo "$final"
            mkfifo output
            eval "$final" 2> output & while read -r line
            do
                notify "$line"
            done < output
            rm output
    elif [ "${name##$DELIM_PROPS}" != "$name" ]; then
        
        name="${name##|}"
        #TODO fix this mess without sed, add some logic to it 
        state=$(echo "$name" | cut -d\: -f 2 | sed -e "s/ true/false/"| sed -e "s/ false/true/")
        name=$(echo "$name" | cut -d\: -f 1)
        notify "Changing property [${name}] to ${state}"
        mac=$(echo "busctl set-property $SERVICE $OBJ_SELF $INTERFACE_SELF $name b $state")
        eval "$mac"
        
    else
        echo "Exiting, due to lack of relevant input"
    fi 
    unset mode
    unset name
    unset mac
    unset preposition
    unset state  
    exit
}
execute_mode "$@"
