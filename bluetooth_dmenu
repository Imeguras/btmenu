#!/bin/sh
IFS=$'\n'
tempfile="/tmp/bluethoothdmenudevicelist.txt"
_bluetoothctl() {
    LC_ALL=C timeout 30 bluetoothctl
}

mode=connect
# Name -> MAC
#declare -A DEVICES
#finalArgs=()
#format=0
busctl tree org.bluez > $tempfile
while read mac; do
    a=$(echo ${mac##*/dev_}| grep -v "└─/org")
    if [ -z $a ]; then
        continue;
    fi
    b=$(busctl get-property org.bluez /org/bluez/hci0/dev_$a org.bluez.Device1 Alias)
    b=${b##s }
    
    c=$(busctl get-property org.bluez /org/bluez/hci0/dev_$a org.bluez.Device1 Address)
    c=${c##s }
    old=""
    set +x $@ $a $b $c
done < $tempfile
unset a; unset b; unset c;
notify() {
    msg=${1?BUG: no message}
    is_error=${2:-0}
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "btmenu" "$msg"  # TODO: escaping
    fi

    if (( is_error )); then
        printf 'ERROR: %s\n' "$msg" >&2
    else
        printf '%s\n' "$msg"
    fi
    unset msg
    unset is_error
}

execute_mode() {
    
    #local mode
    #local name
    #local mac
    #local preposition
    #local expected_to_connect
    #local retries
    mode=${1?BUG: missing mode}
    retries=15
    
    case $mode in
        connect)
            preposition=to
            expected_to_connect=yes
        ;;
        disconnect)
            preposition=from
            expected_to_connect=no
        ;;
    esac
    if [ -z "$2" ]; then
        notify "No devices found. Are they registered with D-Bus?"  
        return 2
    fi
    tella=$@
    inc=$#
    inc=$((inc-1))
    demon=$(eval printf \"\$$inc\"); 
    demon="    "${demon:1:-1}
    inc=$((inc-3))
    while (( $inc >= 2 )); do
        aussie=$(eval printf \"\$$inc\"); 
        demon=$(printf %s»«%s $demon ${aussie:1:-1});
        #demon=${eval echo \"\$$inc\"}
        #printf $demon
        
        #set +x $@ $demon
        #echo $1
        inc=$((inc-3))
    done
    
    demon=$(echo $demon | sed -E "s/«/    /g" | sed -E "s/»/\n/g")
    demon+=$(printf \\n%s " ")
    #
    #echo demon
    #printf $final
    #set x; shift
    #finalArgs[tinc]=" "
    #finalArgs[tinc]="Powered"$(busctl get-property org.bluez /org/bluez/hci0 org.bluez.Adapter1 Powered | sed -e "s/b/:/")
    #finalArgs[tinc]="Discoverable"$(busctl get-property org.bluez /org/bluez/hci0 org.bluez.Adapter1 Discoverable | sed -e "s/b/:/")
    #finalArgs[tinc]="Pairable"$(busctl get-property org.bluez /org/bluez/hci0 org.bluez.Adapter1 Pairable | sed -e "s/b/:/")
    name=$(printf '%s\n' $demon | dmenu -l $# -p "btmenu")
    unset tinc
    unset inc
    [[ $name ]] || return
    mac=${name:format+2:-1}
    if [[ ${name:1:1} != " " ]]; then
        notify "Changing $name"
        mac=$(echo "$name" | sed -e "s/: yes/ off/")
        if [[ $mac =~ "$name" ]]; then 
            mac=$(echo "$name" | sed -e "s/: no/ on/")
        fi
        debug=$(echo ${mac,,} | _bluetoothctl)
        echo $debug 
        exit 
    else
    
        notify "Attempting to $mode $preposition $mac"
        while (( retries-- )); do
            printf '%s %s\n' "$mode" "$mac" | _bluetoothctl
            if printf 'info %s\n' "$mac" |
                _bluetoothctl |
                grep -Pq '^[\t ]+Connected: '"$expected_to_connect"; then
                notify "${mode^}ed $preposition $name"
                return 0
            fi
            sleep 1
        done

        ret="$?"
        notify "Failed to $mode $preposition $name" 1
        return "$ret"
    fi
    unset mode
    unset name
    unset mac
    unset preposition
    unset expected_to_connect
    unset retries
    
}

i=2


#for arg do
    #if [ $arg == :: ]; then
    #    dmenu_args=$( "${@:$i}" )
    #    break
    #fi
   
#    case "$arg" in
#        -d) mode=disconnect ;;
#    esac

#    (( i++ ))
#done
#echo $mode
set +x $mode $@ 

execute_mode "$@"
